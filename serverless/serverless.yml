service: alwaysai-devices
app: alwaysai
org: akshat46

frameworkVersion: "2"

provider:
    name: aws
    vpc:
        securityGroupIds:
            - "sg-ba7798f2"
        subnetIds:
            - "subnet-73ea3529"
            - "subnet-767bf810"
    runtime: nodejs12.x
    lambdaHashingVersion: 20201221
    stage: ${opt:stage, 'dev'}
    region: us-west-1

functions:
    # Sign UP
    authCallback:
        handler: src/functions/authCallback.createUser
        events:
            - cognitoUserPool:
                  pool: alwaysai-userpool
                  trigger: PreSignUp
                  existing: true
        environment:
            RDS_HOST: "database-1.ci6phl6lwafw.us-west-1.rds.amazonaws.com"
            RDS_DB: "postgres"
            RDS_USER: "postgres"
            RDS_PSSWD: "PostgresQL?"
    # iot handle iot device reply
    iot-mock:
        handler: src/functions/iot-mock.processData
        events:
            - iot:
                  name: "device_data_event"
                  sql: "SELECT * FROM 'device_data'"
    # create device
    devices:
        handler: src/functions/devices.createDevice
        events:
            - http:
                  method: put
                  cors: true
                  path: devices/create
        environment:
            RDS_HOST: "database-1.ci6phl6lwafw.us-west-1.rds.amazonaws.com"
            RDS_DB: "postgres"
            RDS_USER: "postgres"
            RDS_PSSWD: "PostgresQL?"
    # get devices by user_id
    getDevicesByUser:
        handler: src/functions/getDevicesByUser.getDevicesByUser
        events:
            - httpApi:
                  method: get
                  cors: true
                  path: /devices/byuser/{uid}
        environment:
            RDS_HOST: "database-1.ci6phl6lwafw.us-west-1.rds.amazonaws.com"
            RDS_DB: "postgres"
            RDS_USER: "postgres"
            RDS_PSSWD: "PostgresQL?"
        # devices:
        #     handler:
        #         src/functions/devices.createDevice
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

plugins:
    - serverless-mocha
custom:
    serverless-mocha-plugin:
        testTemplate: templates/test-template.ejs
        functionTemplate: templates/function-template.ejs
